generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model subscriber {
  id                    String                 @id @default(cuid())
  company_name          String                 @unique
  display_name          String
  api_key               String                 @unique @default(cuid())
  active                Boolean                @default(false)
  created_at            DateTime               @default(now()) @db.Timestamp(6)
  updated_at            DateTime               @default(now()) @db.Timestamp(6)
  roles                 role[]
  extra_permissions     extra_permission[]
  users                 user[]
  socket_sessions       socket_session[]
  conversations         conversation[]
  messages              message[]
  conversation_sessions conversation_session[]
  intents               intent[]
  intent_actions        intent_action[]
  speech_recognitions   speech_recognition[]
  chat_departments      chat_department[]
  chat_templates        chat_template[]
  user_invitations      user_invitation[]
}

model user_invitation {
  id            String                      @id @default(cuid())
  email         String
  code          String
  type          user_invitation_type_enum
  status        user_invitation_status_enum @default(pending)
  created_at    DateTime                    @default(now()) @db.Timestamp(6)
  updated_at    DateTime                    @default(now()) @db.Timestamp(6)
  subscriber    subscriber                  @relation(fields: [subscriber_id], references: [id])
  subscriber_id String
}

model user {
  id                String             @id @default(cuid())
  email             String             @db.VarChar
  password          String             @db.VarChar
  active            Boolean            @default(false)
  online_status     Boolean            @default(true)
  created_at        DateTime           @default(now()) @db.Timestamp(6)
  updated_at        DateTime           @default(now()) @db.Timestamp(6)
  user_meta         user_meta?
  subscriber        subscriber         @relation(fields: [subscriber_id], references: [id])
  subscriber_id     String
  role              role               @relation(fields: [role_id], references: [id])
  role_id           String
  extra_permissions extra_permission[]
  socket_sessions   socket_session[]
  chat_departments  chat_department[]
  chat_templates    chat_template[]

  @@unique(fields: [email, subscriber_id], name: "user_identifier")
}

model user_meta {
  id           String   @id @default(cuid())
  full_name    String   @db.VarChar
  display_name String
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user?    @relation(fields: [user_id], references: [id])
  user_id      String?
}

model role {
  id            String            @id @default(cuid())
  use_for       role_use_for_enum @default(subscriber)
  slug          String            @db.VarChar
  name          String            @db.VarChar
  description   String?           @db.VarChar
  created_at    DateTime          @default(now()) @db.Timestamp(6)
  updated_at    DateTime          @default(now()) @db.Timestamp(6)
  subscriber    subscriber?       @relation(fields: [subscriber_id], references: [id])
  subscriber_id String?
  users         user[]
  permissions   permission[]
}

model permission {
  id                String                  @id @default(cuid())
  use_for           permission_use_for_enum @default(subscriber)
  slug              String                  @unique @db.VarChar
  name              String                  @db.VarChar
  description       String?                 @db.VarChar
  status            Boolean                 @default(true)
  created_at        DateTime                @default(now()) @db.Timestamp(6)
  updated_at        DateTime                @default(now()) @db.Timestamp(6)
  roles             role[]
  extra_permissions extra_permission[]
}

model extra_permission {
  id            String      @id @default(cuid())
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String? // if has then all the users in this subscriber
  permission    permission  @relation(fields: [permission_id], references: [id])
  permission_id String
  user          user?       @relation(fields: [user_id], references: [id])
  user_id       String?
  // administrator user pending
  include       Boolean     @default(true)
}

model socket_session {
  id                    String                 @id @default(cuid())
  info                  String?                @db.VarChar
  ip                    String                 @db.VarChar
  identifier            String?                @db.VarChar // it will determine by which key we can get the user logged info from api
  init_name             String?                @db.VarChar
  init_email            String?                @db.VarChar
  //   user_type           socket_session_user_type_enum @default(client)
  created_at            DateTime               @default(now()) @db.Timestamp(6)
  updated_at            DateTime               @default(now()) @db.Timestamp(6)
  subscriber_id         String
  subscriber            subscriber             @relation(fields: [subscriber_id], references: [id])
  user_id               String?
  user                  user?                  @relation(fields: [user_id], references: [id])
  conversation_sessions conversation_session[]
  created_conversations conversation[]         @relation(name: "created_by")
  closed_conversations  conversation[]         @relation(name: "closed_by")
  messages              message[]
}

model conversation {
  id                    String                 @id @default(cuid())
  users_only            Boolean?
  type                  conversation_type_enum @default(user_to_user_chat)
  closed_at             DateTime?              @db.Timestamp(6)
  created_at            DateTime               @default(now()) @db.Timestamp(6)
  updated_at            DateTime               @default(now()) @db.Timestamp(6)
  subscriber_id         String
  subscriber            subscriber             @relation(fields: [subscriber_id], references: [id])
  created_by_id         String
  created_by            socket_session         @relation(name: "created_by", fields: [created_by_id], references: [id])
  closed_by_id          String?
  closed_by             socket_session?        @relation(name: "closed_by", fields: [closed_by_id], references: [id])
  conversation_sessions conversation_session[]
  messages              message[]
}

model conversation_session {
  id                String         @id @default(cuid())
  joined_at         DateTime?      @db.Timestamp(6)
  left_at           DateTime?      @db.Timestamp(6)
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  socket_session    socket_session @relation(fields: [socket_session_id], references: [id])
  socket_session_id String
  conversation      conversation   @relation(fields: [conversation_id], references: [id])
  conversation_id   String
  subscriber_id     String
  subscriber        subscriber     @relation(fields: [subscriber_id], references: [id])

  @@unique(fields: [conversation_id, socket_session_id], name: "conv_ses_identifier")
}

model message {
  id                String         @id @default(cuid())
  msg               String
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  conversation_id   String
  conversation      conversation   @relation(fields: [conversation_id], references: [id])
  subscriber_id     String
  subscriber        subscriber     @relation(fields: [subscriber_id], references: [id])
  socket_session_id String
  socket_session    socket_session @relation(fields: [socket_session_id], references: [id])
}

model speech_recognition {
  id            String      @id @default(cuid())
  speech        String
  forced_intent Boolean     @default(false)
  confidence    Float       @default(0.0000)
  resolved      Boolean     @default(false)
  has_in_ai     Boolean     @default(false)
  active        Boolean     @default(false)
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  subscriber_id String?
  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  intent_id     String?
  intent        intent?     @relation(fields: [intent_id], references: [id])
}

model intent {
  id                 String               @id @default(cuid())
  tag                String
  description        String
  active             Boolean              @default(false)
  wit_ai_id          String?
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  subscriber_id      String?
  subscriber         subscriber?          @relation(fields: [subscriber_id], references: [id])
  intent_action      intent_action?
  speech_recognition speech_recognition[]
  chat_templates     chat_template[]
}

model intent_action {
  id            String             @id @default(cuid())
  type          intent_action_type
  content       String?
  action_name   String?
  external_path String?
  created_at    DateTime           @default(now()) @db.Timestamp(6)
  updated_at    DateTime           @default(now()) @db.Timestamp(6)
  subscriber_id String?
  subscriber    subscriber?        @relation(fields: [subscriber_id], references: [id])
  intent_id     String
  intent        intent             @relation(fields: [intent_id], references: [id])
}

model chat_template {
  id                 String           @id @default(cuid())
  tag                String
  description        String
  content            String?
  active             Boolean          @default(false)
  created_at         DateTime         @default(now()) @db.Timestamp(6)
  updated_at         DateTime         @default(now()) @db.Timestamp(6)
  chat_department_id String?
  chat_department    chat_department? @relation(fields: [chat_department_id], references: [id])
  subscriber_id      String?
  subscriber         subscriber?      @relation(fields: [subscriber_id], references: [id])
  user_id            String?
  user               user?            @relation(fields: [user_id], references: [id])
  intent_id          String?
  intent             intent?          @relation(fields: [intent_id], references: [id])
}

model chat_department {
  id            String          @id @default(cuid())
  tag           String
  description   String
  active        Boolean         @default(true)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  subscriber_id String
  subscriber    subscriber      @relation(fields: [subscriber_id], references: [id])
  users         user[]
  chat_template chat_template[]
}

enum permission_use_for_enum {
  subscriber
  administrator
}

enum role_use_for_enum {
  subscriber
  administrator
}

enum user_invitation_status_enum {
  pending
  expired
  cancelled
  success
}

enum user_invitation_type_enum {
  user
  agent
}

enum socket_session_user_type_enum {
  client
  user
}

enum conversation_type_enum {
  live_chat
  user_to_user_chat
  group_chat
}

enum intent_action_type {
  action
  static
  external
}
