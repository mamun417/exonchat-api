generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model subscriber {
  id String @id @default(cuid())

  active Boolean @default(false)

  allowed_sites String[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber_subscription subscriber_subscription?
  subscriber_secret       subscriber_secret?
  subscriber_meta         subscriber_meta?
  subscriber_ai           subscriber_ai?

  roles                 role[]
  extra_permissions     extra_permission[]
  users                 user[]
  socket_sessions       socket_session[]
  conversations         conversation[]
  messages              message[]
  conversation_sessions conversation_session[]
  conversation_channels conversation_channel[]
  conversation_ratings  conversation_rating[]
  conversation_tags     conversation_tag[]
  conversation_notes    conversation_note[]
  chat_bots             chat_bot[]
  chat_bot_items        chat_bot_item[]
  intents               intent[]
  intent_actions        intent_action[]
  speech_recognitions   speech_recognition[]
  chat_departments      chat_department[]
  chat_templates        chat_template[]
  user_invitations      user_invitation[]
  user_settings         user_setting_value[]
  settings              setting[]
  attachments           attachment[]
  offline_chat_requests offline_chat_req[]
  facebook_integrations facebook_integration[]
  facebook_pages        facebook_page[]
}

model subscriber_secret {
  id String @id @default(cuid())

  api_key String @unique @default(cuid())

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String     @unique
}

model subscriber_meta {
  id String @id @default(cuid())

  company_name String @unique
  display_name String

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String     @unique
}

model subscriber_ai {
  id String @id @default(cuid())

  access_token String
  app_id       String
  app_name     String

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String     @unique
}

model subscription {
  id String @id @default(cuid())

  slug          String  @unique
  display_name  String
  one_day_price Int
  active        Boolean @default(false)

  subscription_days_to_names subscription_days_to_name[]
  package_element_values     package_element_value[]
  subscriber_subscriptions   subscriber_subscription[]
}

model subscription_days_to_name {
  id String @id @default(cuid())

  price             Int?
  discount          Int?
  in_percentage     Boolean @default(true)
  offer_tag         String?
  offer_description String?

  subscription    subscription @relation(fields: [subscription_id], references: [id])
  subscription_id String
  days_to_name    days_to_name @relation(fields: [days_to_name_id], references: [id])
  days_to_name_id String
}

model days_to_name {
  id String @id @default(cuid())

  slug         String
  display_name String
  in_days      Int

  subscription_days_to_name subscription_days_to_name[]
}

// each subscription package element
model package_element {
  id String @id @default(cuid())

  slug          String
  display_name  String
  static        Boolean @default(true)
  ui_visibility Boolean @default(true)
  active        Boolean @default(true)

  package_element_value package_element_value?
}

// will be use in all the subscription packages if not changed individually
model package_element_value {
  id String @id @default(cuid())

  value String

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  element         package_element @relation(fields: [element_id], references: [id])
  element_id      String
  subscription    subscription    @relation(fields: [subscription_id], references: [id])
  subscription_id String
}

// its only for manage extra values
model subscriber_subscription {
  id String @id @default(cuid())

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber      subscriber   @relation(fields: [subscriber_id], references: [id])
  subscriber_id   String       @unique
  subscription    subscription @relation(fields: [subscription_id], references: [id])
  subscription_id String
}

model user_invitation {
  id String @id @default(cuid())

  email           String
  code            String
  type            user_invitation_type_enum
  status          user_invitation_status_enum @default(pending)
  active          Boolean                     @default(true)
  additional_info Json?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String
}

// user can be this project managers also. they will diff by roles
model user {
  id String @id @default(cuid())

  email         String                  @db.VarChar
  active        Boolean                 @default(false)
  online_status user_online_status_enum @default(online)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  user_meta   user_meta?
  user_secret user_secret?

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String
  role          role       @relation(fields: [role_id], references: [id])
  role_id       String

  extra_permissions extra_permission[]
  socket_session    socket_session?
  chat_departments  chat_department[]
  chat_templates    chat_template[]
  settings          user_setting_value[]

  @@unique(fields: [email, subscriber_id], name: "user_identifier")
}

model user_secret {
  id String @id @default(cuid())

  password                      String    @db.VarChar
  forgot_password_token         String?   @db.VarChar
  forgot_password_token_expired DateTime? @db.Timestamp(6)

  user    user?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model user_meta {
  id String @id @default(cuid())

  full_name    String  @db.VarChar
  display_name String
  phone        String? @db.VarChar
  address      String? @db.VarChar

  department_priority Json?
  info                Json?
  additional_info     Json?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  user          user?       @relation(fields: [user_id], references: [id])
  user_id       String?
  attachment    attachment? @relation(fields: [attachment_id], references: [id])
  attachment_id String?
}

model setting {
  id String @id @default(cuid())

  slug          String
  display_name  String
  description   String?
  default_value String?
  value_options Json? // its for select type input
  sub_category  String?
  category      settings_category_type_enum @default(any)
  input_type    settings_input_type_enum    @default(text)
  user_type     setting_user_type_enum // it will determine where n which page to show

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String? // subscriber? then its only for this subscriner. if not then for this project managers

  user_settings_value user_setting_value[]

  @@unique(fields: [slug, category, user_type], name: "slug_identifier")
}

model user_setting_value {
  id String @id @default(cuid())

  value String

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  user          user?       @relation(fields: [user_id], references: [id])
  user_id       String? // not user ? then for subscriber
  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String? // not subscriber ? then for this project managers (map by user)
  setting       setting?    @relation(fields: [setting_id], references: [id])
  setting_id    String?
}

model role {
  id String @id @default(cuid())

  use_for     role_use_for_enum @default(subscriber)
  slug        String            @db.VarChar
  name        String            @db.VarChar
  description String?           @db.VarChar

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String?

  users       user[]
  permissions permission[]

  @@unique(fields: [slug, use_for], name: "role_identifier")
}

model permission {
  id String @id @default(cuid())

  use_for     permission_use_for_enum @default(subscriber)
  slug        String                  @unique @db.VarChar
  name        String                  @db.VarChar
  description String?                 @db.VarChar
  status      Boolean                 @default(true)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  roles             role[]
  extra_permissions extra_permission[]

  @@unique(fields: [slug, use_for], name: "permission_identifier")
}

model extra_permission {
  id String @id @default(cuid())

  include Boolean @default(true) // include/exclude rule

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String? // if not subscriber but user then for this project manager else not subscriber & not user then for project managers
  permission    permission  @relation(fields: [permission_id], references: [id])
  permission_id String
  user          user?       @relation(fields: [user_id], references: [id])
  user_id       String? // if empty for the subscriber
}

model facebook_integration {
  id String @id @default(cuid())

  // userId after facebook login. it's not unique cz a page can be assigned to multiple subscribers
  // i am thinking about restrit the facebook page from assigning to same subscriber
  // otherwise it will be a problem cz a message will go to both subscriber panel
  user_id         String
  user_info       Json?
  additional_info Json?

  active Boolean @default(true)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String

  facebook_secret facebook_secret?

  facebook_pages facebook_page[]

  @@unique(fields: [user_id, subscriber_id], name: "facebook_integration_identifier")
}

model facebook_secret {
  id String @id @default(cuid())

  long_lived_access_token            String?
  long_lived_access_token_expires_in Int     @default(0) @db.Integer

  token_timeout Boolean @default(false) // if invalid token by api call then make active to false also so that we know the reason
  active        Boolean @default(true)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  facebook_integration    facebook_integration? @relation(fields: [facebook_integration_id], references: [id])
  facebook_integration_id String?
}

model facebook_page {
  id String @id @default(cuid())

  page_id         String
  page_name       String
  page_info       Json?
  additional_info Json?

  long_lived_access_token String?

  token_timeout Boolean @default(false) // if invalid token by api call then make active to false also so that we know the reason
  active        Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  facebook_integration    facebook_integration? @relation(fields: [facebook_integration_id], references: [id])
  facebook_integration_id String?
  subscriber              subscriber            @relation(fields: [subscriber_id], references: [id])
  subscriber_id           String

  chat_departments chat_department[]

  @@unique(fields: [page_id, subscriber_id], name: "facebook_pages_identifier")
}

model socket_session {
  id String @id @default(cuid())

  init_name       String? @db.VarChar
  init_email      String? @db.VarChar
  init_ip         String  @db.VarChar
  init_location   Json?
  init_user_agent String  @db.VarChar // request header user-agent
  info            Json? // save like session related data
  user_info       Json? // save like user related info
  additional_info Json? // save other infos
  use_for         String  @default("own_client") // own client/user / ai / fb / whatsapp /
  use_for_info    Json?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String
  user          user?      @relation(fields: [user_id], references: [id])
  user_id       String?

  conversation_sessions         conversation_session[]
  created_conversations         conversation[]         @relation(name: "created_by")
  created_conversation_channels conversation_channel[] @relation(name: "conversation_channel_created_by")
  closed_conversations          conversation[]         @relation(name: "closed_by")
  messages                      message[]
  attachments                   attachment[]
  offline_chat_requests         offline_chat_req[]
}

model conversation {
  id String @id @default(cuid())

  users_only     Boolean?
  type           conversation_type_enum @default(user_to_user_chat)
  ai_is_replying Boolean                @default(false)

  info            Json?
  additional_info Json?
  other_info      Json?

  closed_at     DateTime? @db.Timestamp(6)
  closed_reason String? // for now it's not null only if closed by server like 1hr inactive

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber         subscriber       @relation(fields: [subscriber_id], references: [id])
  subscriber_id      String
  created_by         socket_session   @relation(name: "created_by", fields: [created_by_id], references: [id])
  created_by_id      String
  closed_by          socket_session?  @relation(name: "closed_by", fields: [closed_by_id], references: [id])
  closed_by_id       String?
  chat_department    chat_department? @relation(fields: [chat_department_id], references: [id])
  chat_department_id String?

  conversation_rating  conversation_rating?
  conversation_channel conversation_channel?

  conversation_sessions conversation_session[]
  messages              message[]
  conversation_tags     conversation_tag[]
  conversation_notes    conversation_note[]
}

model conversation_tag {
  id String @id @default(cuid())

  tag String

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String

  conversations conversation[]

  @@unique(fields: [tag, subscriber_id], name: "conversation_tag_identifier")
}

model conversation_note {
  id String @id @default(cuid())

  tag String

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  conversation    conversation @relation(fields: [conversation_id], references: [id])
  conversation_id String
  subscriber      subscriber   @relation(fields: [subscriber_id], references: [id])
  subscriber_id   String
}

model conversation_rating {
  id String @id @default(cuid())

  rating        Int?
  rating_string String?
  comment       String?

  created_at DateTime @default(now()) @db.Timestamp(6)

  conversation    conversation @relation(fields: [conversation_id], references: [id])
  conversation_id String
  subscriber      subscriber   @relation(fields: [subscriber_id], references: [id])
  subscriber_id   String
}

model conversation_session {
  id String @id @default(cuid())

  joined_at DateTime? @db.Timestamp(6)
  left_at   DateTime? @db.Timestamp(6)

  type            String?
  info            Json? // check before update or insert so that other data can stay also
  additional_info Json?

  left_reason   String?
  closed_reason String?

  last_msg_seen_time DateTime? @db.Timestamp(6)
  can_send_message   Boolean   @default(true) // it's only now for group or channel. true then can send msg else only see
  can_see_message    Boolean   @default(true) // it's only now for group or channel. true then can see msg else hidden
  active             Boolean   @default(true) // it's now for group or channel so that user remove can happen but msg history kept

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  socket_session    socket_session @relation(fields: [socket_session_id], references: [id])
  socket_session_id String
  conversation      conversation   @relation(fields: [conversation_id], references: [id])
  conversation_id   String
  subscriber        subscriber     @relation(fields: [subscriber_id], references: [id])
  subscriber_id     String

  @@unique(fields: [conversation_id, socket_session_id], name: "conv_ses_identifier")
}

// create this with conversation. then assign users to conversation_session
model conversation_channel {
  id String @id @default(cuid())

  tag             String
  display_name    String
  subtitle        String
  info            Json?
  additional_info Json?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber      subscriber     @relation(fields: [subscriber_id], references: [id])
  subscriber_id   String
  conversation    conversation   @relation(fields: [conversation_id], references: [id])
  conversation_id String
  created_by      socket_session @relation(name: "conversation_channel_created_by", fields: [created_by_id], references: [id])
  created_by_id   String
}

model message {
  id String @id @default(cuid())

  msg String? @db.Text

  message_type message_type_enum @default(message)
  sender_type  String?
  info         Json?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  conversation      conversation    @relation(fields: [conversation_id], references: [id])
  conversation_id   String
  subscriber        subscriber      @relation(fields: [subscriber_id], references: [id])
  subscriber_id     String
  socket_session    socket_session? @relation(fields: [socket_session_id], references: [id])
  socket_session_id String?

  attachments attachment[]
}

model offline_chat_req {
  id String @id @default(cuid())

  name    String
  email   String
  subject String
  message String

  info            Json?
  additional_info Json?

  priority String? @default("normal")

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  chat_department    chat_department? @relation(fields: [chat_department_id], references: [id])
  chat_department_id String?
  socket_session     socket_session?  @relation(fields: [socket_session_id], references: [id])
  socket_session_id  String?
  subscriber         subscriber       @relation(fields: [subscriber_id], references: [id])
  subscriber_id      String

  attachments attachment[]
}

model attachment {
  id String @id @default(cuid())

  original_name              String
  uploaded                   Boolean  @default(false)
  size                       Int      @default(0) @db.Integer
  ext                        String
  user_has_control           Boolean  @default(true) // if false user deleted from uploads list but msg can resolve
  for_delete_last_checked_at DateTime @default(now()) @db.Timestamp(6)
  folder_path                String // combine with socket_sesion_id. can be date wise also if needed

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  user_meta user_meta?

  offline_chat_req    offline_chat_req? @relation(fields: [offline_chat_req_id], references: [id])
  offline_chat_req_id String?
  subscriber          subscriber        @relation(fields: [subscriber_id], references: [id])
  subscriber_id       String
  socket_session      socket_session?   @relation(fields: [socket_session_id], references: [id])
  socket_session_id   String?

  messages       message[]
  chat_bot_items chat_bot_item[]
}

model chat_bot {
  id String @id @default(cuid())

  tag             String
  description     Boolean @default(false)
  content         String? // id need to show content before items
  info            Json?
  additional_info Json?
  active          Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  resolve_by_chat_bot_item chat_bot_item? @relation(name: "resolveToChatBot")

  chat_department    chat_department? @relation(fields: [chat_department_id], references: [id])
  chat_department_id String?
  subscriber         subscriber       @relation(fields: [subscriber_id], references: [id])
  subscriber_id      String

  chat_bot_items chat_bot_item[] @relation(name: "chatBotsRelation")

  @@unique(fields: [tag, subscriber_id], name: "chat_bot_identifier")
}

model chat_bot_item {
  id String @id @default(cuid())

  tag          String
  display_name String
  description  Boolean @default(false)
  to_message   String? // when user click this item create message as this
  content      String?
  content_json Json? // it's for advance content making

  info            Json?
  additional_info Json?
  active          Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  resolve_to_chat_bot    chat_bot? @relation(name: "resolveToChatBot", fields: [resolve_to_chat_bot_id], references: [id])
  resolve_to_chat_bot_id String?

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String
  intent        intent?    @relation(fields: [intent_id], references: [id])
  intent_id     String?

  attachments attachment[]
  chat_bots   chat_bot[]   @relation(name: "chatBotsRelation")

  @@unique(fields: [tag, subscriber_id], name: "chat_bot_item_identifier")
}

model speech_recognition {
  id String @id @default(cuid())

  speech     String
  forced     Boolean @default(false) // resolve direct without ai
  confidence Float   @default(0.0000)
  resolved   Boolean @default(false) // after submit get the result

  has_in_ai          Boolean   @default(false) // submitted to ai
  submit_to_ai       Boolean   @default(false) // submit to ai
  remove_from_ai     Boolean   @default(false) // it will handle removing speech from ai. [after remove has_in_ai to false(sys)]
  active             Boolean   @default(false)
  ai_last_checked_at DateTime? @db.Timestamp(6) // check confidence time to time
  for_delete         Boolean   @default(false)

  script_name       String?
  script_status     String?
  script_updated_at DateTime? @db.Timestamp(6)
  tsid              String    @default("") // temp_subscriber_Id. its only for unique check. cz relation can be null

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String?
  intent        intent?     @relation(fields: [intent_id], references: [id])
  intent_id     String?

  @@unique(fields: [speech, tsid, for_delete], name: "speech_subscriber_delete")
}

model intent {
  id String @id @default(cuid())

  tag         String
  description String

  active         Boolean @default(false)
  submit_to_ai   Boolean @default(true)
  remove_from_ai Boolean @default(false)
  ai_id          String?
  for_delete     Boolean @default(false)

  script_name       String?
  script_status     String?
  script_updated_at DateTime? @db.Timestamp(6)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  intent_action intent_action?

  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String?

  speech_recognition speech_recognition[]
  chat_templates     chat_template[]
  chat_bot_items     chat_bot_item[]
}

model intent_action {
  id String @id @default(cuid())

  type         intent_action_type
  content      String? // by action type it will resolve to path or action or content
  content_json Json? // it's for advance content making. if type external then hold key value & make info

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber? @relation(fields: [subscriber_id], references: [id])
  subscriber_id String?
  intent        intent      @relation(fields: [intent_id], references: [id])
  intent_id     String
}

model chat_template {
  id String @id @default(cuid())

  tag         String
  description String
  content     String? // if no intent then content will kick in
  is_action   Boolean @default(false) // if true will try chat_template_action (wip)
  active      Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  chat_department    chat_department? @relation(fields: [chat_department_id], references: [id])
  chat_department_id String?
  subscriber         subscriber?      @relation(fields: [subscriber_id], references: [id])
  subscriber_id      String?
  user               user?            @relation(fields: [user_id], references: [id])
  user_id            String?
  intent             intent?          @relation(fields: [intent_id], references: [id])
  intent_id          String?
}

model chat_department {
  id String @id @default(cuid())

  tag          String
  display_name String  @default("unknown")
  description  String
  active       Boolean @default(true)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  subscriber    subscriber @relation(fields: [subscriber_id], references: [id])
  subscriber_id String

  users                 user[]
  chat_bots             chat_bot[]
  chat_templates        chat_template[]
  conversations         conversation[]
  offline_chat_requests offline_chat_req[]
  facebook_pages        facebook_page[]

  @@unique(fields: [tag, subscriber_id], name: "tag_identifier")
}

enum permission_use_for_enum {
  subscriber
  owner
}

enum role_use_for_enum {
  owner // this project managers
  subscriber
}

enum user_online_status_enum {
  online
  offline
  invisible
  vacation
  sick
  other
}

enum user_invitation_status_enum {
  pending
  expired
  cancelled
  success
}

enum user_invitation_type_enum {
  user
  agent
}

enum socket_session_use_for_enum {
  client
  user
}

enum message_type_enum {
  log
  message
  me_only_log
  me_only_message
  hidden
}

enum conversation_type_enum {
  live_chat
  user_to_user_chat
  group_chat
  channel_chat
}

enum conversation_session_type_enum {
  normal
  chat_transfer
}

enum intent_action_type {
  action
  static
  external
}

enum setting_user_type_enum {
  all
  user
  subscriber
  administrator
}

enum settings_category_type_enum {
  any
  ui
  app
  ai
  conversation
}

enum settings_input_type_enum {
  text
  textarea
  integer
  select
  password
  checkbox
}
